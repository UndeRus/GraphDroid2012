package edu.wwu.cs397.graphdroid_ngon2_furerm;

import java.util.ArrayList;
import java.util.List;


import android.app.Activity;
import android.graphics.Color;
import android.graphics.Point;
import android.os.Bundle;
import android.util.Log;
import android.util.Pair;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewConfiguration;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.parser.client.ast.ASTNode;

import edu.wwu.cs397.graphdroid_ngon2_furerm.MathGraphe.*;;

public class graph_page extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
	
        super.onCreate(savedInstanceState);
        setContentView(R.layout.graph_page);
        
        GraphCanvas cnv = (GraphCanvas)this.findViewById(R.id.cnv);    
        Log.w("sw", String.format("%d", cnv.getWidth()));
        FuncContainer funcList = FuncContainer.getIns(this);
        
        Button btn_draw = (Button)this.findViewById(R.id.btn_draw);
        btn_draw.setOnClickListener(new View.OnClickListener() {				
			public void onClick(View v) {
				handleDrawBtnClick();			
			}
		});
        
        Button btn_eval = (Button)this.findViewById(R.id.btn_eval);
        btn_eval.setOnClickListener(new View.OnClickListener() {				
			public void onClick(View v) {
				handleEval();
			}
		});
        
        funcList.setFinishEvalListener(new OnFinishEvalListener() {
			public void OnFinishEval(Object func, ArrayList<Double> domain) {
				// TODO Auto-generated method stub
				handleFinishEval();
			}
        	
        });
        ActivitySwipeDetector activitySwipeDetector = new ActivitySwipeDetector(this);

        cnv.setOnTouchListener(activitySwipeDetector);	        
	}
	
	private void handleDrawBtnClick()
	{
		GraphCanvas cnv = (GraphCanvas)this.findViewById(R.id.cnv);
		FuncContainer funcList = FuncContainer.getIns(this);
		
		funcList.setScreenWidth(cnv.getWidth());
		funcList.add("x+2", Color.BLUE,	1, -1, 0, 0, true);
		funcList.add("x^2+2", Color.RED,	1, -1, 0, 0, true);
	}
	
	private void handleEval()
	{
		GraphCanvas cnv = (GraphCanvas)this.findViewById(R.id.cnv);
		FuncContainer funcList = FuncContainer.getIns(this);
		double d0 = funcList.getDomain().first;
		double d1 = funcList.getDomain().second;
		double step = funcList.getStep();
		
		Log.v("screen_info", String.format("d0=%f, d1=%f, step=%f", d0, d1, step));
		
		for (long id: funcList.getVisibleFunc())
		{
			for (double x = d0; x <= d1; x+=step)
			{
				try
				{
					double y = funcList.getValue(id, x);					
					Point spoint = cnv.getScreenCoord(x, y);
					Log.d ("coord:", String.format("Finish: (%f, %f) -> (%d, %d)", x, y, spoint.x, spoint.y));
				}
				catch (Exception ex)
				{
					Log.e("graphcanvas", ex.getMessage());
				}
				
			}
		}
	}
	
	private void handleFinishEval()
	{
		Log.d("graph_page", "finish eval 1 func");
		GraphCanvas cnv = (GraphCanvas)this.findViewById(R.id.cnv);
		cnv.postInvalidate();
	}
	
	public class ActivitySwipeDetector implements View.OnTouchListener {
		private Activity activity;
		private int swipeMinDistance = 10;		

		private GestureDetector mGestureDetector;
		
		public ActivitySwipeDetector(final Activity activity){
		    this.activity = activity;
		    			
		    mGestureDetector = new GestureDetector(
		    	new GestureDetector.SimpleOnGestureListener() {
		    		Pair<Double, Double> lastDomain;
				    Pair<Double, Double> lastRange;
				    
		    		@Override
		            public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
		    			
		    			float deltaX = e2.getX() - e1.getX();
		    			float deltaY = e2.getY() - e1.getY();
		    			
		    			if (Math.abs(deltaX) > 10)
		    			{
		    				
			                // i'm only scrolling along the X axis
			    			FuncContainer func = FuncContainer.getIns(activity);
			    			Pair<Double, Double> d = lastDomain;
			    			
			    			GraphCanvas cnv = (GraphCanvas)activity.findViewById(R.id.cnv);
			    			
			    			
			    			double valuePerDp = Math.abs(d.first - d.second) / (double)cnv.getWidth();
			    			double domainSwitch = valuePerDp * - deltaX;
			    			
			    			
			    			
			    			func.setDomain(new Pair<Double, Double>
			    							(d.first + domainSwitch, d.second + domainSwitch));
			    			
			    			cnv.postInvalidate();
			    			
		    			}
		    			if (Math.abs(deltaY) > 10)
		    			{
		    				FuncContainer func = FuncContainer.getIns(activity);
			    			Pair<Double, Double> r = lastRange;
			    			
			    			GraphCanvas cnv = (GraphCanvas)activity.findViewById(R.id.cnv);
			    			
			    			
			    			double valuePerDp = Math.abs(r.first - r.second) / (double)cnv.getHeight();
			    			double rangeSwitch = valuePerDp * deltaY;			    			
			    			
			    			func.setRange(new Pair<Double, Double>
			    							(r.first + rangeSwitch, r.second + rangeSwitch));
			    			
			    			cnv.postInvalidate();
		    			}
		    				
		                return true;
		            }
		    		
		    		public boolean onDown(MotionEvent e) {
		    			FuncContainer func = FuncContainer.getIns(activity);
		    			lastDomain = func.getDomain();
		    			Log.d("touch", String.format("Sw = %d, ", func.getScreenWidth()));
		    			lastRange = func.getRange();
		                return true;
		            }
		    	});

		}

		public boolean onTouch(View arg0, MotionEvent event) {
            if (mGestureDetector.onTouchEvent(event)) {
                return true;
            }
            return false;
		}

	}

}
